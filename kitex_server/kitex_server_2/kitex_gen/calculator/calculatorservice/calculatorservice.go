// Code generated by Kitex v0.6.0. DO NOT EDIT.

package calculatorservice

import (
	"context"
	calculator "github.com/cloudwego/api_gateway/kitex_server/kitex_server_2/kitex_gen/calculator"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return calculatorServiceServiceInfo
}

var calculatorServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "calculatorService"
	handlerType := (*calculator.CalculatorService)(nil)
	methods := map[string]kitex.MethodInfo{
		"calculate": kitex.NewMethodInfo(calculateHandler, newCalculatorServiceCalculateArgs, newCalculatorServiceCalculateResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "calculator",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.0",
		Extra:           extra,
	}
	return svcInfo
}

func calculateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*calculator.CalculatorServiceCalculateArgs)
	realResult := result.(*calculator.CalculatorServiceCalculateResult)
	success, err := handler.(calculator.CalculatorService).Calculate(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCalculatorServiceCalculateArgs() interface{} {
	return calculator.NewCalculatorServiceCalculateArgs()
}

func newCalculatorServiceCalculateResult() interface{} {
	return calculator.NewCalculatorServiceCalculateResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Calculate(ctx context.Context, request *calculator.CalculatorReq) (r *calculator.CalculatorResp, err error) {
	var _args calculator.CalculatorServiceCalculateArgs
	_args.Request = request
	var _result calculator.CalculatorServiceCalculateResult
	if err = p.c.Call(ctx, "calculate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
