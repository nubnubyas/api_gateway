// Code generated by Kitex v0.6.0. DO NOT EDIT.

package authservice

import (
	"context"
	userauth "github.com/cloudwego/api_gateway/kitex_server/kitex_gen/userAuth"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return authServiceServiceInfo
}

var authServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "AuthService"
	handlerType := (*userauth.AuthService)(nil)
	methods := map[string]kitex.MethodInfo{
		"authenticate": kitex.NewMethodInfo(authenticateHandler, newAuthServiceAuthenticateArgs, newAuthServiceAuthenticateResult, false),
		"authorize":    kitex.NewMethodInfo(authorizeHandler, newAuthServiceAuthorizeArgs, newAuthServiceAuthorizeResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "userauth",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.0",
		Extra:           extra,
	}
	return svcInfo
}

func authenticateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userauth.AuthServiceAuthenticateArgs)
	realResult := result.(*userauth.AuthServiceAuthenticateResult)
	success, err := handler.(userauth.AuthService).Authenticate(ctx, realArg.Username, realArg.Password)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newAuthServiceAuthenticateArgs() interface{} {
	return userauth.NewAuthServiceAuthenticateArgs()
}

func newAuthServiceAuthenticateResult() interface{} {
	return userauth.NewAuthServiceAuthenticateResult()
}

func authorizeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userauth.AuthServiceAuthorizeArgs)
	realResult := result.(*userauth.AuthServiceAuthorizeResult)
	success, err := handler.(userauth.AuthService).Authorize(ctx, realArg.Token)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newAuthServiceAuthorizeArgs() interface{} {
	return userauth.NewAuthServiceAuthorizeArgs()
}

func newAuthServiceAuthorizeResult() interface{} {
	return userauth.NewAuthServiceAuthorizeResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Authenticate(ctx context.Context, username string, password string) (r string, err error) {
	var _args userauth.AuthServiceAuthenticateArgs
	_args.Username = username
	_args.Password = password
	var _result userauth.AuthServiceAuthenticateResult
	if err = p.c.Call(ctx, "authenticate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Authorize(ctx context.Context, token string) (r bool, err error) {
	var _args userauth.AuthServiceAuthorizeArgs
	_args.Token = token
	var _result userauth.AuthServiceAuthorizeResult
	if err = p.c.Call(ctx, "authorize", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
