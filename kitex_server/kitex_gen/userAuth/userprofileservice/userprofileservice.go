// Code generated by Kitex v0.6.0. DO NOT EDIT.

package userprofileservice

import (
	"context"
	userauth "github.com/cloudwego/api_gateway/kitex_server/kitex_gen/userAuth"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userProfileServiceServiceInfo
}

var userProfileServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserProfileService"
	handlerType := (*userauth.UserProfileService)(nil)
	methods := map[string]kitex.MethodInfo{
		"getProfile":    kitex.NewMethodInfo(getProfileHandler, newUserProfileServiceGetProfileArgs, newUserProfileServiceGetProfileResult, false),
		"updateProfile": kitex.NewMethodInfo(updateProfileHandler, newUserProfileServiceUpdateProfileArgs, newUserProfileServiceUpdateProfileResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "userauth",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.0",
		Extra:           extra,
	}
	return svcInfo
}

func getProfileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userauth.UserProfileServiceGetProfileArgs)
	realResult := result.(*userauth.UserProfileServiceGetProfileResult)
	success, err := handler.(userauth.UserProfileService).GetProfile(ctx, realArg.Username)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserProfileServiceGetProfileArgs() interface{} {
	return userauth.NewUserProfileServiceGetProfileArgs()
}

func newUserProfileServiceGetProfileResult() interface{} {
	return userauth.NewUserProfileServiceGetProfileResult()
}

func updateProfileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userauth.UserProfileServiceUpdateProfileArgs)
	realResult := result.(*userauth.UserProfileServiceUpdateProfileResult)
	success, err := handler.(userauth.UserProfileService).UpdateProfile(ctx, realArg.Username, realArg.Profile)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newUserProfileServiceUpdateProfileArgs() interface{} {
	return userauth.NewUserProfileServiceUpdateProfileArgs()
}

func newUserProfileServiceUpdateProfileResult() interface{} {
	return userauth.NewUserProfileServiceUpdateProfileResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetProfile(ctx context.Context, username string) (r *userauth.UserProfile, err error) {
	var _args userauth.UserProfileServiceGetProfileArgs
	_args.Username = username
	var _result userauth.UserProfileServiceGetProfileResult
	if err = p.c.Call(ctx, "getProfile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateProfile(ctx context.Context, username string, profile *userauth.UserProfile) (r bool, err error) {
	var _args userauth.UserProfileServiceUpdateProfileArgs
	_args.Username = username
	_args.Profile = profile
	var _result userauth.UserProfileServiceUpdateProfileResult
	if err = p.c.Call(ctx, "updateProfile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
