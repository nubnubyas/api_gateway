// Code generated by hertz generator.

package main

import (
	"context"
	"net/http"
	"os"
	"strings"

	"github.com/cloudwego/api_gateway/hertz_gateway/biz/handler"
	// "github.com/cloudwego/api_gateway/hertz_gateway/biz/handler/api"
	"github.com/cloudwego/api_gateway/hertz_gateway/biz/middleware"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
	"github.com/cloudwego/kitex/pkg/loadbalance"
	"github.com/kitex-contrib/registry-nacos/resolver"
)

// customizeRegister registers customize routers.
func customizedRegister(r *server.Hertz) {
	r.GET("/", func(ctx context.Context, c *app.RequestContext) {
		c.JSON(http.StatusOK, "api-gateway is running")
	})

	print("customizedRegister\n")
	registerGateway(r)

	// your code ...
}

func registerGateway(r *server.Hertz) {
	// prob can remove the protocol translation middleware here (?)
	// since it's already implemented below
	// can add other middlewares in the future (ie. auth, rate limit, etc.)
	group := r.Group("/")
	{
		group.Any("/:svc", handler.Gateway)
	}
	// 		      .Use(middleware.ProtocolTranslation())

	// i think IdlMAP can be removed
	if middleware.IdlMap == nil {
		middleware.IdlMap = make(map[string]generic.DescriptorProvider)
	}

	idlPath := "../idl/"
	c, err := os.ReadDir(idlPath)
	if err != nil {
		hlog.Fatalf("new thrift file provider failed: %v", err)
	}

	// instantiate a naco resolver
	// use the same resolver for each new generic client
	nacosResolver, err := resolver.NewDefaultNacosResolver()
	if err != nil {
		hlog.Fatalf("err:%v", err)
	}

	// generic clients creation
	for _, entry := range c {
		/*
			if entry.IsDir() || entry.Name() == "common.thrift" {
				continue
			}
		*/
		// handle for all .thrift files
		// if entry.Name() == "student_api.thrift" {
		svcName := strings.ReplaceAll(entry.Name(), ".thrift", "")

		provider, err := generic.NewThriftFileProvider(entry.Name(), idlPath)
		if err != nil {
			hlog.Fatalf("new thrift file provider failed: %v", err)
			break
		}

		g, err := generic.JSONThriftGeneric(provider)
		if err != nil {
			hlog.Fatal(err)
		}

		loadbalanceropt := client.WithLoadBalancer(loadbalance.NewWeightedRoundRobinBalancer())
		// creates new generic client for each IDL
		cli, err := genericclient.NewClient(
			svcName,
			g,
			client.WithResolver(nacosResolver),
			loadbalanceropt,
		)
		if err != nil {
			hlog.Fatal(err)
		}

		// maps service to client
		handler.SvcMap[svcName] = cli
	}

	print("registered gateway\n")
}
