// Code generated by hertz generator.

package main

import (
	"context"
	"net/http"
	"os"

	"github.com/cloudwego/api_gateway/hertz_gateway/biz/handler"
	registerCenter "github.com/cloudwego/api_gateway/register_center/shared"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/kitex/client/genericclient"
)

// customizeRegister registers customize routers.
func customizedRegister(r *server.Hertz) {
	r.GET("/", func(ctx context.Context, c *app.RequestContext) {
		c.JSON(http.StatusOK, "api-gateway is updated and running ... ")
	})

	print("customizedRegister\n")
	registerIDLs(r)
}

// to update the IDL mapping
func registerIDLs(r *server.Hertz) {
	group := r.Group("/")
	{
		//group.Any("/:svc/:method", handler.Gateway)
		group.Any("/:svc/*path", handler.Gateway)
	}

	handler.SvcMap = make(map[string]genericclient.Client)
	//handler.PathToMethod = make(map[string]map[string]string)
	handler.PathToMethod = make(map[string]map[handler.MethodPath]string)

	idlPath := "../idl/"
	c, err := os.ReadDir(idlPath)
	if err != nil {
		hlog.Errorf("new thrift file provider failed: %v", err)
	}

	// same resolver for all generic clients
	if registerCenter.ErrResolver != nil {
		hlog.Errorf("err: %v", err)
	}

	// generic clients creation
	for _, entry := range c {

		if entry.IsDir() || entry.Name() == "common.thrift" {
			continue
		}

		err := createGenericClient(entry.Name(), idlPath)
		if err != nil {
			hlog.Error(err)
			break
		}
	}

	go watchIDLs(idlPath)
}
