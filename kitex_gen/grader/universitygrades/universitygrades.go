// Code generated by Kitex v0.6.1. DO NOT EDIT.

package universitygrades

import (
	"context"
	grader "github.com/cloudwego/api_gateway/kitex_server/kitex_gen/grader"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return universityGradesServiceInfo
}

var universityGradesServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UniversityGrades"
	handlerType := (*grader.UniversityGrades)(nil)
	methods := map[string]kitex.MethodInfo{
		"getGrades":    kitex.NewMethodInfo(getGradesHandler, newUniversityGradesGetGradesArgs, newUniversityGradesGetGradesResult, false),
		"insertGrades": kitex.NewMethodInfo(insertGradesHandler, newUniversityGradesInsertGradesArgs, newUniversityGradesInsertGradesResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "grader",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func getGradesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*grader.UniversityGradesGetGradesArgs)
	realResult := result.(*grader.UniversityGradesGetGradesResult)
	success, err := handler.(grader.UniversityGrades).GetGrades(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUniversityGradesGetGradesArgs() interface{} {
	return grader.NewUniversityGradesGetGradesArgs()
}

func newUniversityGradesGetGradesResult() interface{} {
	return grader.NewUniversityGradesGetGradesResult()
}

func insertGradesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*grader.UniversityGradesInsertGradesArgs)
	realResult := result.(*grader.UniversityGradesInsertGradesResult)
	success, err := handler.(grader.UniversityGrades).InsertGrades(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUniversityGradesInsertGradesArgs() interface{} {
	return grader.NewUniversityGradesInsertGradesArgs()
}

func newUniversityGradesInsertGradesResult() interface{} {
	return grader.NewUniversityGradesInsertGradesResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetGrades(ctx context.Context, req *grader.GetCapRequest) (r *grader.GetCapResponse, err error) {
	var _args grader.UniversityGradesGetGradesArgs
	_args.Req = req
	var _result grader.UniversityGradesGetGradesResult
	if err = p.c.Call(ctx, "getGrades", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InsertGrades(ctx context.Context, req *grader.InsertGradeRequest) (r *grader.InsertGradeResponse, err error) {
	var _args grader.UniversityGradesInsertGradesArgs
	_args.Req = req
	var _result grader.UniversityGradesInsertGradesResult
	if err = p.c.Call(ctx, "insertGrades", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
