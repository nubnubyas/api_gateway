// Code generated by thriftgo (0.2.12). DO NOT EDIT.

// Package common provides common error codes and functions.
package common

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

// Err represents an error code.
type Err int64

// Error codes
const (
	Err_BadRequest            Err = 10001
	Err_Unauthorized          Err = 10002
	Err_ServerNotFound        Err = 10003
	Err_ServerMethodNotFound  Err = 10004
	Err_RequestServerFail     Err = 10005
	Err_ServerHandleFail      Err = 10006
	Err_ResponseUnableParse   Err = 10007
	Err_JsonNotFound          Err = 10008
	Err_GenericClientNotFound Err = 10009
	Err_GenericCallFailed     Err = 10010
	Err_GenericCallTimeout    Err = 10011
)

// returns the string value of the Err
func (p Err) String() string {
	switch p {
	case Err_BadRequest:
		return "BadRequest"
	case Err_Unauthorized:
		return "Unauthorized"
	case Err_ServerNotFound:
		return "ServerNotFound"
	case Err_ServerMethodNotFound:
		return "ServerMethodNotFound"
	case Err_RequestServerFail:
		return "RequestServerFail"
	case Err_ServerHandleFail:
		return "ServerHandleFail"
	case Err_ResponseUnableParse:
		return "ResponseUnableParse"
	case Err_JsonNotFound:
		return "JsonNotFound"
	case Err_GenericClientNotFound:
		return "GenericClientNotFound"
	case Err_GenericCallFailed:
		return "GenericCallFailed"
	case Err_GenericCallTimeout:
		return "GenericCallTimeout"
	}
	return "<UNSET>"
}

// returns the value of the Err
func ErrFromString(s string) (Err, error) {
	switch s {
	case "BadRequest":
		return Err_BadRequest, nil
	case "Unauthorized":
		return Err_Unauthorized, nil
	case "ServerNotFound":
		return Err_ServerNotFound, nil
	case "ServerMethodNotFound":
		return Err_ServerMethodNotFound, nil
	case "RequestServerFail":
		return Err_RequestServerFail, nil
	case "ServerHandleFail":
		return Err_ServerHandleFail, nil
	case "ResponseUnableParse":
		return Err_ResponseUnableParse, nil
	case "JsonNotFound":
		return Err_JsonNotFound, nil
	case "GenericClientNotFound":
		return Err_GenericClientNotFound, nil
	case "GenericCallFailed":
		return Err_GenericCallFailed, nil
	case "GenericCallTimeout":
		return Err_GenericCallTimeout, nil
	}
	return Err(0), fmt.Errorf("not a valid Err string")
}

// ErrPtr returns a pointer to the given Err value.
func ErrPtr(v Err) *Err {
	return &v
}

// Scan assigns a value from a database driver to Err.
// It expects the value to be of type sql.NullInt64.
// If the value is not null, it assigns the corresponding int64 value to Err.
func (p *Err) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Err(result.Int64)
	return
}

// Value returns the value of Err as a driver.Value and an error.
// If Err is nil, it returns nil, nil.
func (p *Err) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}
